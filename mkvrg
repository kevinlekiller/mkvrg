#!/bin/bash

cat > /dev/null <<LICENSE
    Copyright (C) 2016,2023  kevinlekiller
    Copyright (C) 2016  WhitePeter

    This program is free software; you can redistribute it and/or
    modify it under the terms of the GNU General Public License
    as published by the Free Software Foundation; either version 2
    of the License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
    https://www.gnu.org/licenses/old-licenses/gpl-2.0.en.html
LICENSE

cat > /dev/null <<DESCRIPTION
    Bash script for analyzing audio tracks in matroska files with ffmpeg and
    applying replaygain (EBU r128) gain and peak information
    with mkvpropedit, this avoids remuxing the matroksa file.
    Pass list of files or a directory to scan files, if you pass a
    directory it will recursively search in it for files.
    It will only work on files with these extensions: "mkv, mka, mk3d".

    Requires: ffmpeg mkvpropedit

    examples:
    ./mkvrg                  ; Recursive search in current folder for matroska files.
    ./mkvrg test.mkv         ; Process test.mkv in current folder.
    ./mkvrg Videos/          ; Recursive search in Videos folder for matroska files.
    ./mkvrg test.mkv Videos/ ; Process test.mkv in current folder and recursive
                                  search in Videos folder for matroska files.

    See settings below.
DESCRIPTION

#########################################################################################
##################################### Settings ##########################################
#########################################################################################

# Check if the file already has tags or if tags were written succesfully.
VERIFY=${VERIFY:-true}

# Force mkvrg to process matroska files, even if they already have replaygain tags. (ignored if VERIFY is false)
FORCE=${FORCE:-false}

# Minimum matroska file size to work on. change to +0 to ignore.
# For example, set to +50M to ignore files under 50MB.
MINSIZE=${MINSIZE:-"+0"}

# Remux .mp4 and .mov files to .mkv before scanning for .mkv files.
REMUX=${REMUX:-true}

# Which ffmpeg executable to use.
# Set to ffmpeg to automatically find.
# Set to a full path to use a different ffmpeg executable.
FFMPEG=${FFMPEG:-"ffmpeg"}

# Reference loudness to use.
# EBU R128 default is -23.00
# Rreplaygain 2.0 default is -18.00
# See:
# https://wiki.hydrogenaud.io/index.php?title=ReplayGain_2.0_specification#Reference_level
# https://ffmpeg.org/ffmpeg-filters.html#ebur128
# https://en.wikipedia.org/wiki/EBU_R_128
REFLOUDNESS=${REFLOUDNESS:-"-23.00"}

# Type of peak calculation to use.
# sample : Faster but less accurate.
# true : Slower but accurate.
PEAKTYPE=${PEAKTYPE:-"true"}

#########################################################################################
################################### Settings End ########################################
#########################################################################################

if [[ ! $PEAKTYPE =~ ^(sample|true)$ ]]; then
    echo -e "\e[31mERROR: PEAKTYPE must be either sample or true.\e[0m"
    exit 1
fi

if ! command -v "$FFMPEG" &> /dev/null; then
    echo -e "\e[31mERROR: Unable to find the ffmpeg executable.\e[0m"
    exit 1
fi

reqProgs="awk file find grep mkvpropedit mktemp sed"
for reqProg in $reqProgs; do
    if ! command -v "$reqProg" &> /dev/null; then
        echo -e "\e[31mERROR: This program could not be found: $reqProg\e[0m"
        exit 1
    fi
done
unset reqProg reqProgs

tmpFile="$(mktemp)"
if [[ ! -f $tmpFile ]] || [[ ! -w $tmpFile ]]; then
    echo -e "\e[31mERROR: Could not create temp file $tmpFile. Check permissions.\e[0m"
    exit 1
fi

if [[ ! $REFLOUDNESS =~ ^\-?[0-9]{1,2}\.[0-9]{2}$ ]]; then
    echo -e "\e[31mERROR: Invalid REFLOUDNESS format.\e[0m"
    exit 1
fi
refLoudnessInt=${REFLOUDNESS//\.[0-9]*/}
rgAlgo="EBU R128"

trap cleantmp SIGHUP SIGINT SIGQUIT SIGTERM
function cleantmp() {
    [[ -f $muxInFile && -f $muxOutFile ]] && rm -f "$muxOutFile"
    rm -f "$tmpFile"
    [[ -n $1 ]] && exit "$1" || exit 1
}

function lufsTodB() {
    printf "%0.2f" "$(awk "BEGIN{print ($REFLOUDNESS - $1)}")"
}

function dBtoAmplitude() {
    printf "%06f" "$(awk "BEGIN{print 10^($1/20)}")"
}

if [[ $REMUX == true ]]; then
    while read -r file; do
        muxInFile="$(realpath "$file")"
        muxOutFile=${muxInFile//\.[mM][oO][vV]/.mkv}
        muxOutFile=${muxOutFile//\.[mM][pP]4/.mkv}
        if [[ $muxInFile == "$muxOutFile" ]]; then
            unset muxInFile muxOutFile
            continue
        fi
        echo "INFO: Remuxing '$muxInFile' to '$muxOutFile'."
        if "$FFMPEG" -y -loglevel error -stats -nostdin -hide_banner -i "$muxInFile" -c copy "$muxOutFile"; then
            rm -f "$muxInFile"
        else
            rm -f "$muxOutFile"
        fi
        unset muxInFile muxOutFile
    done < <(find "$@" -type f -size "$MINSIZE" \( -iname "*.mp4" -o -iname "*.mov" \))
fi

filesProcessed=0
while read -r file; do
    file="$(realpath "$file")"
    if [[ ! $(file "$file") =~ "Matroska" ]]; then
        echo -e "\e[92mNOTICE: '$file' is not a matroska file.\e[0m"
        continue
    fi

    ffmpegOut=$("$FFMPEG" -nostdin -hide_banner -i "$file" 2>&1)
    if [[ ! $FORCE == true ]] && [[ $VERIFY == true ]] && [[ "$ffmpegOut" =~ ${rgAlgo} ]]; then
        echo -e "\e[92mNOTICE: Skipping, replaygain tags already exist on file '$file'\e[0m"
        continue
    fi

    tracks=$(echo "$ffmpegOut" | grep -Poi "Stream\s*#\d+:\d+.+?Audio" | grep -Po "\d+:\d+" | cut -d : -f 2)
    if [[ $tracks == "" ]]; then
        echo -e "\e[93mWARNING: Could not get track list for '$file'.\e[0m"
        continue
    fi

    tracksProcessed=0
    for track in $tracks; do
        echo "INFO: Running ffmpeg (using $PEAKTYPE peak calculation), this can take a while. (track $track on file '$file')"
        ffmpegCmd="$FFMPEG -loglevel info -nostats -nostdin -hide_banner -i \"$file\" -map 0:a -filter_complex \"[0:a:$((track-1))]ebur128=peak=$PEAKTYPE:framelog=quiet:target=$refLoudnessInt\" -f null -"
        echo "$ffmpegCmd"
        ffmpegOut=$(eval "$ffmpegCmd" 2>&1 | tr "\n" " " | sed "s/^.*\(Parsed_ebur128.*$\)/\1/" | sed "s/ \+/ /g")
        echo "$ffmpegOut"
        trackGain=$(lufsTodB "$(echo "$ffmpegOut" | grep -Po " I: -?[\d.]+ LUFS" | cut -d\  -f3)")
        trackPeak=$(dBtoAmplitude "$(echo "$ffmpegOut" | grep -Po " Peak: -?[\d.]+ dBFS" | cut -d\  -f3)")
        trackRange=$(printf "%0.2f" "$(echo "$ffmpegOut" | grep -Po " Loudness range: LRA: -?[\d.]+ LU" | cut -d\  -f5)")
        if [[ $trackGain == "" || $trackPeak == "" || $trackRange == "" ]]; then
            echo -e "\e[92mNOTICE: Problem finding $rgAlgo info from ffmpeg for track $track on file '$file'.\e[0m"
            continue
        fi

        echo "<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>
            <!DOCTYPE Tags SYSTEM \"matroskatags.dtd\">
            <Tags>
                <Tag>
                    <Targets>
                    </Targets>
                    <Simple>
                        <Name>REPLAYGAIN_ALGORITHM</Name>
                        <String>$rgAlgo</String>
                    </Simple>
                    <Simple>
                        <Name>REPLAYGAIN_REFERENCE_LOUDNESS</Name>
                        <String>$REFLOUDNESS LUFS</String>
                    </Simple>
                    <Simple>
                        <Name>REPLAYGAIN_TRACK_GAIN</Name>
                        <String>$trackGain dB</String>
                    </Simple>
                    <Simple>
                        <Name>REPLAYGAIN_TRACK_PEAK</Name>
                        <String>$trackPeak</String>
                    </Simple>
                    <Simple>
                        <Name>REPLAYGAIN_TRACK_RANGE</Name>
                        <String>$trackRange dB</String>
                    </Simple>
                </Tag>
            </Tags>" | sed "s/^            //g" > "$tmpFile"

        echo "INFO: Applying gain ($trackGain dB), peak ($trackPeak amplitude), range ($trackRange dB) for track $track on file '$file'."
        mkvpropedit --tags track:"$((++track))":"$tmpFile" "$file"
        if [[ $VERIFY == true ]] && [[ ! $("$FFMPEG" -nostdin -hide_banner -i "$file" 2>&1) =~ ${rgAlgo} ]]; then
            echo -e "\e[93mWARNING: Replaygain has not been applied for track $track on file '$file'.\e[0m"
            continue
        fi
        ((tracksProcessed++))
    done
    [[ $tracksProcessed -gt 0 ]] && ((filesProcessed++))
done < <(find "$@" -type f -size "$MINSIZE" \( -iname "*.mk[av]" -o -iname "*.mk3d" \))
[[ $filesProcessed -gt 0 ]] && cleantmp 0
